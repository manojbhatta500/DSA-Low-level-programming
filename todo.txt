⚙️ Stage 2: Practical Utilities (Projects 6–10)

fn load_files_recursive(path: &Path, files: &mut Vec<String>) {
    if path.is_dir() {
        for entry in fs::read_dir(path).unwrap() {
            let entry = entry.unwrap();
            let path = entry.path();
            if path.is_file() {
                files.push(path.to_str().unwrap().to_string());
            } else if path.is_dir() {
                load_files_recursive(&path, files); // recursive call
            }
        }
    }
}

File searcher: look for filenames that match a pattern (like *.txt, config.json, or passwords.db).

Content searcher (like grep): once you have the list of files, open each and search for a keyword inside.

File indexer: build a database of all files, their sizes, and modification times, so you can query it quickly later.

Duplicate finder: hash file contents and detect duplicates.

Media library scanner: collect MP3s, images, videos, etc.




9. Text Searcher with Index

🎯 Build text index for fast searching.
🛠 tantivy crate.
⭐ Intermediate
📚 Full-text search basics.
➕ Related: document search APIs.
📝 Index documents, allow fast search queries.

10. Markdown → HTML Converter

🎯 Convert markdown docs to HTML.
🛠 pulldown-cmark.
⭐ Intermediate
📚 Parsing + rendering.
➕ Related: static site gen.
📝 Parse markdown, render HTML, write file.

🌐 Stage 3: Networking + APIs (Projects 11–15)

Goal: Look like a backend/API capable Rust dev.

11. Simple REST API (CRUD)

🎯 CRUD API for tasks.
🛠 axum/warp, serde, tokio.
⭐ Intermediate
📚 REST basics in Rust.
➕ Related: full SaaS backend.
📝 Setup server, implement CRUD endpoints.

12. HTTP Request Logger Proxy

🎯 Proxy traffic, log headers + bodies.
🛠 hyper, async.
⭐ Intermediate
📚 Middleware + logging.
➕ Related: API gateway.
📝 Intercept requests, log, forward to target.

13. Website Health Monitor

🎯 Periodically check URLs, send alerts.
🛠 reqwest, async tasks.
⭐ Intermediate
📚 Async jobs + alerts.
➕ Related: uptime dashboards.
📝 Periodic HTTP checks, log + alert failures.

14. HTTP Load Tester (like ab)

🎯 Stress test an endpoint.
🛠 tokio, concurrency.
⭐ Advanced
📚 Concurrency, benchmarking.
➕ Related: profiling tools.
📝 Spawn workers, send requests, measure latency.

15. REST API with Auth (JWT)

🎯 Extend API with login, auth.
🛠 jsonwebtoken, DB.
⭐ Advanced
📚 Auth flows, DB integration.
➕ Related: SaaS boilerplate.
📝 Secure endpoints with JWT, connect DB.

🚀 Stage 4: Advanced Client-Level Projects (Projects 16–20)

Goal: Demonstrate serious, contract-ready skills.

16. Deployment Automation CLI

🎯 Automate server deploys over SSH.
🛠 ssh2 crate, CLI UX.
⭐ Advanced
📚 Remote ops, automation.
➕ Related: CI/CD pipelines.
📝 Connect SSH, pull repo, build, restart service.

17. Log Parser + Dashboard Exporter

🎯 Extend log parser → export HTML/CSV dashboard.
🛠 csv, serde_json, HTML templating.
⭐ Advanced
📚 Reporting + output formats.
➕ Related: BI tools.
📝 Parse logs, summarize, export dashboard reports.

18. File Sync Tool (Local → Remote)

🎯 Sync files across machines.
🛠 Checksums, ssh2, file I/O.
⭐ Advanced
📚 File sync + conflict resolution.
➕ Related: rsync-like.
📝 Compare hashes, transfer changed files, resolve conflicts.

19. Distributed Task Queue (Mini Celery)

🎯 Worker pool, job queue, results.
🛠 tokio, channels, networking.
⭐ Advanced
📚 Concurrency, task distribution.
➕ Related: workflow engines.
📝 Queue jobs, dispatch to workers, collect results.

20. Microservice Backend with DB + Auth + API

🎯 Complete backend skeleton.
🛠 axum, PostgreSQL, sqlx, JWT.
⭐ Advanced
📚 Full backend app in Rust.
➕ Related: SaaS boilerplate.
📝 CRUD + auth, DB storage, secure API endpoints.
